package optionals

<% if package %>import (
	"<%= package %>"
)<% end %>

type Optional<%= name %> interface {
	Try(func(<%= type %>) (<%= type %>, error)) Optional<%= name %>
	HandleErr(func(error) error) Optional<%= name %>
	PrintErr() Optional<%= name %>
	ToString() OptionalString

<% methods.each do |m| %>  <%= m %>() Optional<%= name %>
<% end %>}

type Some<%= name %> struct {
	value <%= type %>
}

type None<%= name %> struct {
	err error
}

func Wrap<%= name %>(s <%= type %>, e error) Optional<%= name %> {
	if e != nil {
		return None<%= name %>{
			err: e,
		}
	}

	return Some<%= name %>{
		value: s,
	}
}

func (s Some<%= name %>) Try(f func(<%= type %>) (<%= type %>, error)) Optional<%= name %> {
	return Wrap<%= name %>(f(s.value))
}

func (n None<%= name %>) Try(f func(<%= type %>) (<%= type %>, error)) Optional<%= name %> {
	return n
}

func (s Some<%= name %>) HandleErr(f func(error) error) Optional<%= name %> {
	return s
}

func (n None<%= name %>) HandleErr(f func(error) error) Optional<%= name %> {
	return None<%= name %>{
		err: f(n.err),
	}
}

func (s Some<%= name %>) PrintErr() Optional<%= name %> {
	return s
}

func (n None<%= name %>) PrintErr() Optional<%= name %> {
	return n.HandleErr(func(err error) error {
		println(err.Error())
		return err
	})
}

func (s Some<%= name %>) ToString() OptionalString {
	<% if type != 'string' %>
		return WrapString(s.value.ToString(), nil)
	<% else %>
		return WrapString(s.value, nil)
	<% end %>
}

func (n None<%= name %>) ToString() OptionalString {
	return NoneString{
		err: n.err,
	}
}
